include(CMakeDependentOption)

get_filename_component(PLUGIN_ROOT ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
file(GLOB_RECURSE AVAILABLE_PLUGIN_CMAKEFILES RELATIVE_PATH ${PLUGIN_ROOT} "CMakeLists.txt")

foreach(AVAILABLE_PLUGIN_CMAKEFILE ${AVAILABLE_PLUGIN_CMAKEFILES})
  get_filename_component(AVAILABLE_PLUGIN_PATH ${AVAILABLE_PLUGIN_CMAKEFILE} DIRECTORY)

  string(REPLACE ${PLUGIN_ROOT} "APPLICATION" PLUGIN_DIR_ ${AVAILABLE_PLUGIN_PATH})
  string(REPLACE "/" "_" PLUGIN_DIR ${PLUGIN_DIR_})

  get_filename_component(AVAILABLE_PLUGIN_NAME ${AVAILABLE_PLUGIN_PATH} NAME)
  set(AVAILABLE_PLUGIN_OPTION "KADISTUDIO_PLUGIN_${PLUGIN_DIR}")
  file(RELATIVE_PATH AVAILABLE_PLUGIN_SUBDIR ${PLUGIN_ROOT} ${AVAILABLE_PLUGIN_PATH})

  if(NOT "${AVAILABLE_PLUGIN_SUBDIR}" STREQUAL "")
    if(NOT AVAILABLE_PLUGIN_SUBDIR MATCHES "thirdparty") # better test needed to check if it is a plugin folder
      CMAKE_DEPENDENT_OPTION(${AVAILABLE_PLUGIN_OPTION} "Use ${AVAILABLE_PLUGIN_NAME}" ON "KADISTUDIO_COMPILE_PLUGINS" OFF)

      if(${AVAILABLE_PLUGIN_OPTION})
        message(STATUS "adding ${AVAILABLE_PLUGIN_SUBDIR}")
        add_subdirectory(${AVAILABLE_PLUGIN_SUBDIR})
        get_property(plugin_targets DIRECTORY ${AVAILABLE_PLUGIN_PATH} PROPERTY BUILDSYSTEM_TARGETS)
        foreach(plugin_target ${plugin_targets})
          add_dependencies(${plugin_target} kadistudio_framework)
        endforeach()
      endif(${AVAILABLE_PLUGIN_OPTION})
    endif(NOT AVAILABLE_PLUGIN_SUBDIR MATCHES "thirdparty")
  endif(NOT "${AVAILABLE_PLUGIN_SUBDIR}" STREQUAL "")

endforeach(AVAILABLE_PLUGIN_CMAKEFILE)
